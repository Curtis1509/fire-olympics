/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fire.olympics;

import fire.olympics.display.*;

import fire.olympics.graphics.ModelLoader;
import fire.olympics.graphics.ShaderProgram;
import org.lwjgl.*;
import org.lwjgl.glfw.GLFWErrorCallback;
import static org.lwjgl.glfw.GLFW.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Objects;

public class App implements AutoCloseable {
    public static void main(String[] args) {
        Thread t = Thread.currentThread();
        if (!t.getName().equals("main")) {
            System.out.println("warning: not running on main thread!");
        }
        
        try (App app = new App(Path.of("app", "src", "main", "resources"))) {
            app.createMainWindow();
            app.mainLoop();
        } catch (Exception e) {
            System.out.printf("error: %s%n", e);
            e.printStackTrace();
        }
    }

    private final Path resourcePath;
    private final ArrayList<Controller> controllers = new ArrayList<>();

    public App(Path resourcePath) {
        if (!Files.exists(resourcePath)) {
            this.resourcePath = Path.of("app").relativize(resourcePath);
        } else {
            this.resourcePath = resourcePath;
        }
        // Setup an error callback. The default implementation
        // will print the error message in System.err.
        GLFWErrorCallback.createPrint(System.err).set();
        // Initialize GLFW. Most GLFW functions will not work before doing this.
        if (!glfwInit()) {
            throw new IllegalStateException("Unable to initialize GLFW");
        }
    }

    public void mainLoop() {
        for (Controller c : controllers) {
            try {
                c.window.use();
                c.load();
                c.window.done();
                c.window.showWindow();
            } catch (Exception e) {
                System.out.println("error loading window: " + e);
            }
        }

        ArrayList<Window> closedWindows = new ArrayList<>();
        while (controllers.size() > 0) {
            for (Controller controller : controllers) {
                boolean shouldClose = updateWindow(controller.window, controller.renderer);
                if (shouldClose) {
                    closedWindows.add(controller.window);
                }
            }

            if (closedWindows.size() > 0) {
                for (Window window : closedWindows) {
                    window.close();
                    controllers.removeIf(c -> c.window == window);
                }
                closedWindows.clear();
            }

            glfwPollEvents(); // i.e. processKeyboardEvents() for all windows
        }
    }

    private boolean updateWindow(Window window, Renderer renderer) {
        if (!window.isHidden()) {
            window.use();
            renderer.update();
            renderer.aspectRatio = window.aspectRatio();
            renderer.render();
            window.update();
            window.resizeViewportIfNeeded();
            window.done();
        }
        return window.shouldClose();
    }

    public void createMainWindow() throws Exception {
        System.out.println("LWJGL version: " + Version.getVersion());

        Window window = new Window("Fire Olympics", 800, 600);

        window.init();
        System.out.println(window.openGlVersion());

        Path vertPath = resource("shaders", "shader.vert");
        Path fragPath = resource("shaders", "shader.frag");

        ShaderProgram program = new ShaderProgram(vertPath, fragPath);
        program.readCompileAndLink();
        program.createUniform("projectionMatrix");
        program.createUniform("worldMatrix");
        program.createUniform("sun");
        program.validate();

        ShaderProgram programWithTexture = new ShaderProgram(resource("shaders", "shader_with_texture.vert"),
                resource("shaders", "shader_with_texture.frag"));
        programWithTexture.readCompileAndLink();
        programWithTexture.createUniform("projectionMatrix");
        programWithTexture.createUniform("worldMatrix");
        programWithTexture.createUniform("sun");
        programWithTexture.createUniform("texture_sampler");
        programWithTexture.validate();

        ModelLoader loader = new ModelLoader(this.resourcePath);
        Renderer render = new Renderer(program, programWithTexture);
        Controller controller = new Controller(window, render, loader);
        controllers.add(controller);
    }

    private Path resource(String first, String... more) {
        return resourcePath.resolve(Path.of(first, more));
    }

    @Override
    public void close() {
        // Terminate GLFW and free the error callback
        glfwTerminate();
        Objects.requireNonNull(glfwSetErrorCallback(null)).free();
    }
}
