/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fire.olympics;

import fire.olympics.display.*;

import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import java.nio.*;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL33C.*;

public class App {
    private Path resourcePath = Path.of("app", "src", "main", "resources");

    public App() {
        if(!Files.exists(resourcePath))
            resourcePath = Path.of("app").relativize(resourcePath);
    }

    Window window;

    public void run() {
        System.out.println("LWJGL version: " + Version.getVersion());

        try {
            window = new Window();

            // todo: improve resource loading
            // At the moment this assumes the current working directory is the project directory,
            // is not necessarily true. Typically, the shaders would be included as resource files 
            // some how during the build. We could also watch for changes to the files and recompile
            // the shaders to make experimenting easier.

            Path vertPath = resourcePath.resolve(Path.of("shaders", "shader.vert"));
            Path fragPath = resourcePath.resolve(Path.of("shaders", "shader.frag"));

            ShaderProgram pipeline = new ShaderProgram(vertPath, fragPath);
            pipeline.readCompileAndLink();

            //float x, float y, float z, float length, float height, float width
            //Sample inputs. Follow the variables above to modify constraints
            float[] positions = GenerateModel.createPositions(0f,0f,0f,0.5f,0.3f,0.4f);
            float[] positions2 = GenerateModel.createPositions(0.7f,0.3f,0f,0.4f,0.6f,0.4f);
            int[] indices = GenerateModel.createIndicies();
            float[] colors = GenerateModel.createColours();

            try (Renderer render = new Renderer(window.getWindow(), pipeline)) {
                render.add(new Mesh(positions, indices, colors));
                render.add(new Mesh(positions2, indices, colors));
                render.run();
            }
        } catch (Exception e) {
            System.out.printf("error: %s%n", e);
        } finally {
            window.close();
        }
    }

    public static void main(String[] args) {
        Thread t = Thread.currentThread();
        if (!t.getName().equals("main")) {
            System.out.println("warning: not running on main thread!");
        }

        App app = new App();
        app.run();
    }
}
