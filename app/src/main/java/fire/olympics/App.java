/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fire.olympics;

import fire.olympics.display.*;

import fire.olympics.graphics.ModelLoader;
import fire.olympics.graphics.ShaderProgram;
import org.lwjgl.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;

public class App {
    private Path resourcePath = Path.of("app", "src", "main", "resources");

    public App() {
        if (!Files.exists(resourcePath))
            resourcePath = Path.of("app").relativize(resourcePath);
    }

    public void run() {
        System.out.println("LWJGL version: " + Version.getVersion());

        Window window = new Window("Fire Olympics", 800, 600);

        try {
            window.init();
            System.out.println(window.openGlVersion());

            Path vertPath = shader("shader.vert");
            Path fragPath = shader("shader.frag");

            ShaderProgram program = new ShaderProgram(vertPath, fragPath);
            program.readCompileAndLink();
            program.createUniform("projectionMatrix");
            program.createUniform("worldMatrix");
            program.createUniform("sun");
            program.validate();

            ShaderProgram programWithTexture = new ShaderProgram(shader("shader_with_texture.vert"),
                    shader("shader_with_texture.frag"));
            programWithTexture.readCompileAndLink();
            programWithTexture.createUniform("projectionMatrix");
            programWithTexture.createUniform("worldMatrix");
            programWithTexture.createUniform("sun");
            programWithTexture.createUniform("texture_sampler");
            programWithTexture.validate();

            try (ModelLoader loader = new ModelLoader()) {
                loader.loadTexture(resourcePath.resolve(Path.of("textures", "metal_test.png")));
                loader.loadTexture(resourcePath.resolve(Path.of("textures", "wood_test_2.png")));
                ArrayList<GameItem> objects = loader
                        .loadModel(resourcePath.resolve(Path.of("models", "proto_arrow_textured.obj")));

                Renderer render = new Renderer(window, program, programWithTexture);
                for (GameItem object : objects) {
                    object.setPosition(0, 0, -10);
                    render.add(object);
                }
                render.run();
            }
        } catch (Exception e) {
            System.out.printf("error: %s%n", e);
        } finally {
            window.close();
        }
    }

    private Path shader(String name) {
        return resourcePath.resolve(Path.of("shaders", name));
    }

    public static void main(String[] args) {
        Thread t = Thread.currentThread();
        if (!t.getName().equals("main")) {
            System.out.println("warning: not running on main thread!");
        }

        App app = new App();
        app.run();
    }
}
